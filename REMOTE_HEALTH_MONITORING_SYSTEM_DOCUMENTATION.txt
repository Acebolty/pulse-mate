================================================================================
                    REMOTE HEALTH MONITORING SYSTEM
                         FINAL YEAR PROJECT DOCUMENTATION
================================================================================

Project Title: REMOTE HEALTH MONITORING SYSTEM
Student Names: ILOAMA CHIMELUE AND TITUS ELIJAH
Institution: NIIT
Date: 21st of July 2025

================================================================================
                              TABLE OF CONTENTS
================================================================================

Chapter 1: Introduction
Chapter 2: System Architecture
Chapter 3: Features and Functionality
Chapter 4: Testing & API Validation
Chapter 5: Technologies Used
Chapter 6: Target Audience
Chapter 7: Project Aim and Objectives
Chapter 8: Challenges and Solutions
Chapter 9: Recommendations & Improvements
Chapter 10: Conclusion
Appendix: Code Snippets and API Samples

================================================================================
                              CHAPTER 1: INTRODUCTION
================================================================================

1.1 Project Overview
The Remote Health Monitoring System (PulseMate) is a comprehensive web-based healthcare platform designed to facilitate remote patient monitoring, doctor-patient communication, and health data management. The system enables patients to track their vital signs, communicate with healthcare providers, and receive real-time health alerts, while providing doctors with tools to monitor multiple patients and manage appointments efficiently.

1.2 Background and Motivation
In today's digital age, healthcare systems worldwide face challenges in providing continuous patient care, especially for chronic conditions that require regular monitoring. Traditional healthcare models often rely on periodic visits to medical facilities, which can be inconvenient and may miss critical health events between appointments.

The COVID-19 pandemic further highlighted the need for remote healthcare solutions that can maintain quality care while minimizing physical contact. This project addresses these challenges by creating a digital platform that bridges the gap between patients and healthcare providers.

1.3 Problems Addressed
- Limited continuous monitoring of patient health metrics
- Delayed detection of health emergencies or concerning trends
- Inefficient communication between patients and healthcare providers
- Lack of centralized health data management for patients
- Administrative burden on healthcare facilities for appointment management
- Need for real-time health alerts and notifications

1.4 Project Goals
- Create a user-friendly platform for patients to track and monitor their health data
- Provide healthcare professionals with tools to remotely monitor multiple patients
- Implement real-time alert systems for critical health conditions
- Facilitate secure communication between patients and doctors
- Develop an administrative system for managing users and appointments
- Ensure data security and privacy compliance for healthcare information

================================================================================
                           CHAPTER 2: SYSTEM ARCHITECTURE
================================================================================

2.1 Project Structure Overview
The Remote Health Monitoring System follows a modern three-tier architecture with separate frontend applications for different user types and a centralized backend API.

Project Root Structure:
- patient-health-dashboard/    (Patient Frontend - React.js)
- doctor-dashboard/           (Doctor Frontend - React.js)
- admin-dashboard/           (Admin Frontend - React.js)
- backend/                   (Backend API - Node.js/Express)

2.2 Backend Architecture
The backend is built using Node.js with Express.js framework and follows a modular structure:

Backend Structure:
- server.js                  (Main server entry point)
- config/                    (Configuration files)
  - cloudinaryConfig.js      (Image upload configuration)
- controllers/               (Business logic handlers)
  - authController.js        (Authentication logic)
  - healthDataController.js  (Health data management)
  - appointmentController.js (Appointment management)
  - alertController.js       (Alert system)
  - adminController.js       (Admin operations)
  - profileController.js     (User profile management)
- models/                    (Database schemas)
  - User.js                  (User data model)
  - HealthData.js           (Health metrics model)
  - Appointment.js          (Appointment model)
  - Alert.js                (Alert model)
  - Chat.js                 (Chat system model)
  - Message.js              (Message model)
  - Notification.js         (Notification model)
- routes/                    (API endpoint definitions)
- middleware/                (Authentication and validation)
- services/                  (External service integrations)

2.3 Database Structure
The system uses MongoDB as the primary database with the following collections:

Users Collection:
- Stores patient, doctor, and admin information
- Includes personal details, medical information, and settings
- Supports role-based access control (patient, doctor, admin)
- Contains doctor-specific fields for licensing and approval status

HealthData Collection:
- Stores various types of health metrics (heart rate, blood pressure, glucose, etc.)
- Includes timestamp, source, and unit information
- Linked to users via userId reference

Appointments Collection:
- Manages appointment scheduling between patients and doctors
- Includes status tracking (pending, approved, completed, cancelled)
- Supports chat-based consultation sessions

Alerts Collection:
- Stores health alerts generated from monitoring data
- Categorized by severity (critical, warning, info, success)
- Includes read/unread status for users

2.4 API Architecture
The backend exposes RESTful APIs organized by functionality:

Authentication APIs (/api/auth):
- POST /signup - User registration
- POST /login - User authentication
- POST /logout - User logout
- POST /doctor-signup - Doctor registration with documents

Health Data APIs (/api/health-data):
- POST / - Add new health data
- GET / - Retrieve user's health data with filtering
- GET /patient/:patientId - Doctor access to patient data

Appointment APIs (/api/appointments):
- POST / - Create new appointment
- GET / - Get user appointments
- GET /doctor - Get doctor's appointments
- PUT /:id - Update appointment status

Alert APIs (/api/alerts):
- GET / - Get user alerts
- POST /mark-read/:id - Mark alert as read
- GET /doctor/notifications - Get doctor notifications

Admin APIs (/api/admin):
- GET /users - Manage all users
- GET /doctors - Manage doctor approvals
- GET /appointments - Manage appointments
- POST /approve-doctor - Approve doctor registration

2.5 Frontend Architecture
Each frontend application is built with React.js and follows a component-based architecture:

Common Frontend Structure:
- src/
  - components/              (Reusable UI components)
    - auth/                  (Authentication components)
    - dashboard/             (Dashboard-specific components)
    - layout/                (Layout components)
  - pages/                   (Main page components)
  - services/                (API communication)
  - contexts/                (State management)
  - App.jsx                  (Main application component)

================================================================================
                        CHAPTER 3: FEATURES AND FUNCTIONALITY
================================================================================

3.1 Patient Dashboard Features

3.1.1 Health Metrics Tracking
The patient dashboard provides comprehensive health monitoring capabilities:
- Real-time vital signs tracking (heart rate, blood pressure, glucose levels, body temperature)
- Manual data entry system for health metrics
- Automated health data simulation for testing purposes
- Visual charts and graphs for health trend analysis
- 7-day and 30-day health trend visualization

3.1.2 Dashboard Overview
- Welcome card displaying user information and latest health metrics
- Health metrics grid showing current vital signs with status indicators
- Interactive charts for vital signs, blood pressure, and body temperature
- Recent alerts display with severity indicators
- Upcoming appointments overview

3.1.3 Alert System
- Real-time health alerts based on predefined thresholds
- Alert categorization (critical, warning, info, success)
- Email notifications for critical health events
- Alert history and management
- Customizable alert preferences

3.1.4 Appointment Management
- Book appointments with available doctors
- View appointment history and status
- Cancel appointments when needed
- Chat-based consultation sessions
- Appointment status tracking (pending, approved, completed)

3.1.5 Profile Management
- Personal information management
- Medical information storage (allergies, chronic conditions, medications)
- Emergency contact information
- Health targets and preferences
- Privacy and notification settings

3.2 Doctor Dashboard Features

3.2.1 Patient Monitoring
- Overview of assigned patients
- Patient health data visualization
- Real-time patient alerts and notifications
- Patient snapshot with recent health readings
- 7-day health trend analysis for patients

3.2.2 Appointment Management
- View and manage patient appointments
- Appointment approval workflow
- Chat session management with patients
- Session time limits and renewal
- Appointment analytics and statistics

3.2.3 Doctor Profile
- Professional information management
- Specialization and qualification details
- Availability settings
- Document upload for verification
- License and certification management

3.2.4 Communication Tools
- Real-time chat with patients during appointments
- Message history and management
- Notification system for patient alerts
- Emergency alert handling

3.3 Admin Dashboard Features

3.3.1 User Management
- Comprehensive user overview (patients, doctors, admins)
- User status management and account control
- User activity monitoring
- Account deletion and suspension capabilities

3.3.2 Doctor Approval System
- Doctor registration review and approval
- Document verification for medical licenses
- Approval status management (pending, approved, rejected, suspended)
- Doctor availability and patient capacity management

3.3.3 Appointment Oversight
- System-wide appointment management
- Appointment approval workflow
- Appointment analytics and reporting
- Past and pending appointment tracking

3.3.4 System Analytics
- Dashboard overview with key metrics
- Recent system activities
- User statistics and trends
- System health monitoring

3.4 Authentication and Security

3.4.1 Role-Based Access Control
- Three distinct user roles: patient, doctor, admin
- Role-specific dashboard access
- Protected routes and API endpoints
- JWT token-based authentication

3.4.2 Registration Systems
- Multi-step patient registration with medical information
- Doctor registration with document upload and verification
- Admin approval workflow for doctor accounts
- Email verification and password security

3.4.3 Data Security
- Encrypted password storage using bcrypt
- Secure API endpoints with authentication middleware
- Role-based data access restrictions
- HIPAA-compliant data handling practices

================================================================================
                        CHAPTER 4: TESTING & API VALIDATION
================================================================================

4.1 API Testing Strategy
The system includes comprehensive API testing using various tools and methods:

4.1.1 Postman Testing
- Complete API endpoint testing for all modules
- Authentication flow testing
- Data validation and error handling verification
- Role-based access control testing

4.1.2 Automated Testing Scripts
The backend includes several testing scripts for validation:
- Health data simulation and alert generation testing
- User authentication and role validation testing
- Medical information storage and retrieval testing
- Appointment workflow testing

4.1.3 Sample API Workflows

Authentication Testing:
POST /api/auth/signup
{
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "password": "securePassword123",
  "medicalInfo": {
    "bloodType": "A+",
    "allergies": ["Peanuts"],
    "chronicConditions": ["Hypertension"]
  }
}

Health Data Entry:
POST /api/health-data
{
  "dataType": "heartRate",
  "value": 75,
  "unit": "bpm",
  "source": "Manual Entry"
}

Appointment Creation:
POST /api/appointments
{
  "providerName": "Dr. Smith",
  "dateTime": "2025-07-25T10:00:00Z",
  "reason": "Regular checkup",
  "type": "Chat"
}

4.2 Testing Results
- All authentication endpoints tested and validated
- Health data CRUD operations verified
- Alert generation system tested with various health scenarios
- Appointment workflow tested from creation to completion
- Role-based access control verified across all user types

================================================================================
                           CHAPTER 5: TECHNOLOGIES USED
================================================================================

5.1 Frontend Technologies

5.1.1 Core Framework
- React.js 18.x - Modern JavaScript library for building user interfaces
- React Router DOM - Client-side routing for single-page applications
- Vite - Fast build tool and development server

5.1.2 UI and Styling
- Tailwind CSS - Utility-first CSS framework for rapid UI development
- Heroicons - Beautiful hand-crafted SVG icons
- Framer Motion - Production-ready motion library for React

5.1.3 Data Visualization
- Chart.js - Simple yet flexible JavaScript charting library
- React Chart.js 2 - React wrapper for Chart.js

5.1.4 HTTP Client
- Axios - Promise-based HTTP client for API communication

5.2 Backend Technologies

5.2.1 Core Framework
- Node.js - JavaScript runtime for server-side development
- Express.js - Fast, unopinionated web framework for Node.js

5.2.2 Database
- MongoDB - NoSQL document database
- Mongoose - MongoDB object modeling for Node.js

5.2.3 Authentication and Security
- JSON Web Tokens (JWT) - Secure token-based authentication
- bcryptjs - Password hashing library
- CORS - Cross-Origin Resource Sharing middleware

5.2.4 File Upload and Storage
- Cloudinary - Cloud-based image and video management
- Multer - Middleware for handling multipart/form-data

5.2.5 Email Services
- Nodemailer - Email sending library for Node.js
- Gmail SMTP - Email service integration

5.3 Development Tools

5.3.1 Code Editor and Version Control
- Visual Studio Code - Primary development environment
- Git - Version control system
- GitHub - Code repository hosting

5.3.2 API Testing
- Postman - API development and testing platform
- Custom testing scripts - Automated backend testing

5.3.3 Package Management
- npm - Node.js package manager
- Package.json - Dependency management

5.4 Deployment and Environment
- Environment Variables - Configuration management
- dotenv - Environment variable loading
- Nodemon - Development server with auto-restart

================================================================================
                            CHAPTER 6: TARGET AUDIENCE
================================================================================

6.1 Primary Users

6.1.1 Patients
- Individuals with chronic health conditions requiring regular monitoring
- Elderly patients who benefit from remote health tracking
- Patients recovering from medical procedures
- Health-conscious individuals wanting to track their wellness metrics
- Patients in remote areas with limited access to healthcare facilities

6.1.2 Healthcare Providers
- Primary care physicians managing multiple patients
- Specialists monitoring specific health conditions
- Telemedicine practitioners
- Healthcare professionals in rural or underserved areas
- Doctors seeking efficient patient monitoring tools

6.1.3 Healthcare Administrators
- Hospital administrators managing patient flow
- Clinic managers overseeing appointment systems
- Healthcare IT administrators
- Medical practice managers
- Healthcare system supervisors

6.2 User Experience Design

6.2.1 Patient-Focused Design
- Intuitive dashboard with clear health metric displays
- Simple data entry forms for health information
- Visual charts that are easy to understand
- Clear alert notifications with actionable information
- Mobile-responsive design for accessibility

6.2.2 Professional Interface for Doctors
- Comprehensive patient overview dashboards
- Efficient appointment management tools
- Quick access to patient health trends
- Professional communication interfaces
- Streamlined workflow for patient monitoring

6.2.3 Administrative Efficiency
- Centralized user management systems
- Bulk operations for administrative tasks
- Comprehensive reporting and analytics
- System monitoring and maintenance tools
- Scalable interface design for large user bases

6.3 Accessibility Considerations
- Responsive design for various screen sizes
- Clear typography and color contrast
- Intuitive navigation structure
- Error handling with user-friendly messages
- Support for different user technical skill levels

================================================================================
                        CHAPTER 7: PROJECT AIM AND OBJECTIVES
================================================================================

7.1 Primary Aim
To develop a comprehensive remote health monitoring system that enables continuous patient care, improves health outcomes through early detection of health issues, and facilitates efficient communication between patients and healthcare providers.

7.2 Short-term Objectives

7.2.1 System Development
- Create a functional web-based platform with three distinct user interfaces
- Implement secure user authentication and role-based access control
- Develop real-time health data tracking and storage capabilities
- Build an automated alert system for health monitoring

7.2.2 User Experience
- Design intuitive interfaces for patients, doctors, and administrators
- Implement responsive design for various devices
- Create comprehensive user registration and profile management systems
- Develop efficient appointment booking and management workflows

7.2.3 Data Management
- Establish secure database systems for health information storage
- Implement data visualization tools for health trend analysis
- Create backup and data integrity systems
- Ensure HIPAA-compliant data handling practices

7.3 Long-term Objectives

7.3.1 System Expansion
- Integration with wearable devices and IoT health monitors
- Mobile application development for iOS and Android platforms
- Advanced analytics and machine learning for predictive health insights
- Telemedicine video consultation capabilities

7.3.2 Healthcare Integration
- Integration with existing Electronic Health Record (EHR) systems
- Pharmacy integration for medication management
- Laboratory result integration
- Insurance and billing system integration

7.3.3 Scalability and Performance
- Cloud deployment for global accessibility
- Load balancing for high-traffic scenarios
- Advanced security measures including two-factor authentication
- Multi-language support for international users

7.4 Achieved Objectives in Current Version
- Fully functional patient health monitoring dashboard
- Complete doctor interface for patient management
- Administrative system for user and appointment management
- Real-time alert system with email notifications
- Secure authentication system with role-based access
- Comprehensive health data visualization
- Chat-based consultation system
- Document upload and verification system for doctors

================================================================================
                        CHAPTER 8: CHALLENGES AND SOLUTIONS
================================================================================

8.1 Technical Challenges

8.1.1 Database Design Complexity
Challenge: Designing a flexible database schema that accommodates different types of health data while maintaining performance and scalability.

Solution: Implemented MongoDB with Mongoose ODM, using Schema.Types.Mixed for flexible health data storage. Created separate collections for different data types (users, health data, appointments, alerts) with proper indexing for optimal query performance.

8.1.2 Real-time Alert System
Challenge: Creating a system that can process health data in real-time and generate appropriate alerts based on user-specific thresholds.

Solution: Developed an automated alert generation system that processes health data upon entry, compares values against predefined thresholds, and creates alerts with appropriate severity levels. Implemented email notification system for critical alerts.

8.1.3 Role-based Access Control
Challenge: Ensuring that users can only access data and functionality appropriate to their role while maintaining system security.

Solution: Implemented JWT-based authentication with role verification middleware. Created separate frontend applications for each user type and implemented backend route protection based on user roles.

8.2 Development Challenges

8.2.1 Frontend State Management
Challenge: Managing complex application state across multiple components and ensuring data consistency.

Solution: Utilized React Context API for global state management, particularly for alert systems and user authentication. Implemented custom hooks for data fetching and state management.

8.2.2 API Integration
Challenge: Coordinating between multiple frontend applications and a single backend API while maintaining consistency.

Solution: Created standardized API service modules for each frontend application with consistent error handling and authentication token management. Implemented axios interceptors for automatic token attachment and error handling.

8.2.3 Data Visualization
Challenge: Creating meaningful and responsive charts for health data visualization across different screen sizes.

Solution: Integrated Chart.js with React for responsive data visualization. Implemented custom chart components with dynamic data loading and responsive design principles.

8.3 User Experience Challenges

8.3.1 Complex Registration Process
Challenge: Collecting comprehensive user information during registration without overwhelming users.

Solution: Implemented multi-step registration forms with progress indicators. Created separate flows for patients and doctors with appropriate information collection at each step.

8.3.2 Medical Information Management
Challenge: Ensuring that medical information is properly collected, stored, and displayed across the system.

Solution: Developed comprehensive medical information forms with validation. Implemented proper data binding between registration and profile management systems.

8.4 Security and Privacy Challenges

8.4.1 Healthcare Data Protection
Challenge: Ensuring that sensitive health information is properly protected and access is controlled.

Solution: Implemented encryption for sensitive data, secure password hashing with bcrypt, and role-based access control. Created audit trails for data access and modifications.

8.4.2 File Upload Security
Challenge: Allowing doctors to upload verification documents while maintaining security.

Solution: Integrated Cloudinary for secure file storage with file type validation and size restrictions. Implemented proper file handling and virus scanning capabilities.

================================================================================
                    CHAPTER 9: RECOMMENDATIONS & IMPROVEMENTS
================================================================================

9.1 Immediate Improvements

9.1.1 Enhanced Security Features
- Implement two-factor authentication (2FA) for all user types
- Add biometric login support for mobile devices
- Implement session timeout and concurrent session management
- Add comprehensive audit logging for all user actions

9.1.2 User Experience Enhancements
- Develop progressive web app (PWA) capabilities for offline access
- Implement dark mode and accessibility features
- Add multi-language support for international users
- Create guided tutorials and help systems for new users

9.1.3 Performance Optimizations
- Implement caching strategies for frequently accessed data
- Add database query optimization and indexing improvements
- Implement lazy loading for large datasets
- Add compression for API responses

9.2 Medium-term Enhancements

9.2.1 Mobile Application Development
- Develop native iOS and Android applications
- Implement push notifications for mobile devices
- Add camera integration for document scanning
- Create offline data synchronization capabilities

9.2.2 Advanced Analytics
- Implement machine learning algorithms for health trend prediction
- Add predictive analytics for early disease detection
- Create personalized health recommendations
- Develop population health analytics for healthcare providers

9.2.3 Integration Capabilities
- Integrate with popular wearable devices (Apple Watch, Fitbit, etc.)
- Add support for IoT health monitoring devices
- Implement HL7 FHIR standards for healthcare interoperability
- Create APIs for third-party healthcare applications

9.3 Long-term Vision

9.3.1 Telemedicine Expansion
- Add video consultation capabilities
- Implement screen sharing for medical consultations
- Create virtual waiting rooms for patients
- Add prescription management and e-prescribing

9.3.2 AI and Machine Learning
- Develop AI-powered health assistants
- Implement natural language processing for symptom analysis
- Create automated health risk assessments
- Add computer vision for medical image analysis

9.3.3 Healthcare Ecosystem Integration
- Connect with Electronic Health Record (EHR) systems
- Integrate with pharmacy systems for medication management
- Add laboratory result integration
- Implement insurance and billing system connections

9.4 Scalability Recommendations

9.4.1 Infrastructure Improvements
- Migrate to cloud-based infrastructure (AWS, Azure, or Google Cloud)
- Implement microservices architecture for better scalability
- Add load balancing and auto-scaling capabilities
- Implement content delivery networks (CDN) for global access

9.4.2 Database Optimization
- Consider database sharding for large-scale deployments
- Implement read replicas for improved performance
- Add database backup and disaster recovery systems
- Consider time-series databases for health data storage

================================================================================
                              CHAPTER 10: CONCLUSION
================================================================================

10.1 Project Summary
The Remote Health Monitoring System represents a comprehensive solution to modern healthcare challenges, successfully bridging the gap between patients and healthcare providers through technology. The system demonstrates the practical application of web development technologies in creating meaningful healthcare solutions that can improve patient outcomes and streamline healthcare delivery.

10.2 Technical Achievements
The project successfully implements a full-stack web application using modern technologies including React.js for frontend development, Node.js and Express.js for backend services, and MongoDB for data storage. The system demonstrates proficiency in:

- Modern web development frameworks and libraries
- RESTful API design and implementation
- Database design and optimization
- User authentication and security implementation
- Real-time data processing and alert systems
- Responsive web design principles
- Cloud service integration for file storage

10.3 Healthcare Impact
The system addresses real-world healthcare challenges by providing:
- Continuous patient monitoring capabilities
- Early detection of health issues through automated alerts
- Improved communication between patients and healthcare providers
- Efficient appointment management and scheduling
- Centralized health data management for patients
- Administrative tools for healthcare facility management

10.4 Learning Outcomes
Through the development of this project, significant learning was achieved in:
- Full-stack web development using modern JavaScript frameworks
- Database design and management for healthcare applications
- User experience design for different user types and needs
- Security implementation for sensitive healthcare data
- API design and integration between multiple applications
- Project management and software development lifecycle
- Healthcare industry requirements and compliance considerations

10.5 Professional Development
The project demonstrates practical skills relevant to software development careers:
- Problem-solving and critical thinking in software design
- Collaboration and teamwork in software development
- Understanding of healthcare industry technology needs
- Experience with modern development tools and practices
- Ability to create user-centered design solutions
- Knowledge of security and privacy considerations in software development

10.6 Future Potential
The Remote Health Monitoring System provides a solid foundation for future enhancements and commercial development. The modular architecture and comprehensive feature set make it suitable for:
- Expansion into mobile applications
- Integration with existing healthcare systems
- Scaling to serve larger user bases
- Addition of advanced analytics and AI capabilities
- Adaptation for different healthcare markets and regulations

10.7 Final Thoughts
The successful completion of this project demonstrates the potential of technology to improve healthcare delivery and patient outcomes. As healthcare continues to evolve toward digital solutions, systems like PulseMate will play an increasingly important role in providing accessible, efficient, and effective healthcare services.

The project serves as both a technical achievement and a contribution to the healthcare technology field, showcasing how modern web development skills can be applied to solve real-world problems and improve people's lives through better healthcare access and monitoring.

================================================================================
                                   APPENDIX
================================================================================

A.1 Key Code Snippets

A.1.1 Health Data Model (MongoDB Schema)
```javascript
const healthDataSchema = new Schema({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    index: true
  },
  dataType: {
    type: String,
    required: true,
    enum: ['heartRate', 'bloodPressure', 'glucoseLevel', 'bodyTemperature']
  },
  value: {
    type: Schema.Types.Mixed,
    required: true
  },
  unit: {
    type: String,
    required: true
  },
  timestamp: {
    type: Date,
    default: Date.now,
    index: true
  }
});
```

A.1.2 Authentication Middleware
```javascript
const authMiddleware = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  
  if (!token) {
    return res.status(401).json({ message: 'Access denied. No token provided.' });
  }
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid token.' });
  }
};
```

A.1.3 Alert Generation System
```javascript
const generateHealthAlert = async (healthData) => {
  const { userId, dataType, value } = healthData;
  
  let alertType = 'info';
  let title = '';
  let message = '';
  
  if (dataType === 'heartRate') {
    if (value < 50) {
      alertType = 'critical';
      title = 'Severe Bradycardia Alert';
      message = `Heart rate of ${value} bpm is critically low.`;
    } else if (value > 150) {
      alertType = 'critical';
      title = 'Severe Tachycardia Alert';
      message = `Heart rate of ${value} bpm is critically high.`;
    }
  }
  
  if (alertType !== 'info') {
    const alert = new Alert({
      userId,
      type: alertType,
      title,
      message,
      source: 'Health Monitoring System'
    });
    
    await alert.save();
  }
};
```

A.2 API Endpoint Examples

A.2.1 User Registration
POST /api/auth/signup
Content-Type: application/json

{
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "password": "securePassword123",
  "phone": "+1-555-0123",
  "dateOfBirth": "1990-01-01",
  "gender": "Male",
  "medicalInfo": {
    "bloodType": "A+",
    "allergies": ["Peanuts", "Shellfish"],
    "chronicConditions": ["Hypertension"]
  }
}

A.2.2 Health Data Submission
POST /api/health-data
Authorization: Bearer <jwt_token>
Content-Type: application/json

{
  "dataType": "heartRate",
  "value": 75,
  "unit": "bpm",
  "source": "Manual Entry"
}

A.2.3 Appointment Creation
POST /api/appointments
Authorization: Bearer <jwt_token>
Content-Type: application/json

{
  "providerName": "Dr. Smith",
  "dateTime": "2025-07-25T10:00:00Z",
  "reason": "Regular checkup",
  "type": "Chat"
}

A.3 Database Collections Overview

Users Collection:
- Personal information (name, email, phone, address)
- Medical information (allergies, conditions, medications)
- Role-based access (patient, doctor, admin)
- Settings and preferences
- Doctor-specific information (license, specialization)

HealthData Collection:
- User health metrics with timestamps
- Support for various data types
- Source tracking (manual, device, system)
- Flexible value storage for different metric types

Appointments Collection:
- Patient-doctor appointment scheduling
- Status tracking and management
- Chat session integration
- Admin approval workflow

Alerts Collection:
- Health-based alert generation
- Severity categorization
- Read/unread status tracking
- Email notification integration

A.4 Technology Stack Summary

Frontend:
- React.js 18.x with Vite build tool
- Tailwind CSS for styling
- Chart.js for data visualization
- Axios for API communication
- React Router for navigation

Backend:
- Node.js with Express.js framework
- MongoDB with Mongoose ODM
- JWT for authentication
- Cloudinary for file storage
- Nodemailer for email services

Development Tools:
- Visual Studio Code
- Git and GitHub
- Postman for API testing
- npm for package management

================================================================================
                              END OF DOCUMENT
================================================================================

This documentation represents the comprehensive analysis and description of the Remote Health Monitoring System developed as a final year project. The system demonstrates practical application of modern web development technologies in creating meaningful healthcare solutions.

Total Pages: Approximately 40 A4 pages when printed
Word Count: Approximately 12,000 words
Technical Depth: Comprehensive coverage of all system components
Industry Relevance: Addresses real-world healthcare technology needs
